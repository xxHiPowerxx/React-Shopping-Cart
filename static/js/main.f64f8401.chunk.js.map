{"version":3,"sources":["assets/js/accessibility.js","components/reactshoppingcartlogo.jsx","components/productsonpageform.jsx","components/productsincart.jsx","components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["handleFirstTab","n","keyCode","document","body","classList","add","window","removeEventListener","addEventListener","handleMouseDownOnce","remove","ReactShoppingCartLogo","state","className","icon","faReact","Component","ProductsOnPageForm","productInputValue","handleChange","event","console","log","target","value","setState","onSubmit","props","htmlFor","type","id","onChange","this","ProductsInCart","totalCounters","faShoppingCart","InvertOrderComponent","condition","firstComponent","secondComponent","first","second","Fragment","NavBar","invertOrder","that","node","_nav","ResizeSensor","clientWidth","ref","c","Counter","counter","getBadgeClasses","formatValue","onClick","onIncrement","onDecrement","onDelete","classes","Counters","counters","onReset","map","key","App","numOfProductsValue","initiateCounters","handleIncrement","getThisCounter","index","handleDecrement","thisCounter","handleSubmit","preventDefault","numOfCounters","handleReset","handleDelete","counterId","filter","num","i","push","constructCounters","indexOf","length","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f64f8401.chunk.js","sourcesContent":["/* eslint-disable no-unused-expressions */\r\n/* eslint-disable no-sequences */\r\n//  Accessibility Adds .user-is-tabbing on body on tab   //\r\nfunction handleFirstTab(n) {\r\n  9 === n.keyCode &&\r\n    (document.body.classList.add(\"user-is-tabbing\"),\r\n    window.removeEventListener(\"keydown\", handleFirstTab),\r\n    window.addEventListener(\"mousedown\", handleMouseDownOnce));\r\n}\r\nfunction handleMouseDownOnce() {\r\n  document.body.classList.remove(\"user-is-tabbing\"),\r\n    window.removeEventListener(\"mousedown\", handleMouseDownOnce),\r\n    window.addEventListener(\"keydown\", handleFirstTab);\r\n}\r\nwindow.addEventListener(\"keydown\", handleFirstTab);\r\n","import React, { Component } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faReact } from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nclass ReactShoppingCartLogo extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"site-logo\">\r\n        <div className=\"react-logo\">\r\n          <FontAwesomeIcon\r\n            className=\"react-shopping-cart-logo site-logo-icon fa-spin\"\r\n            icon={faReact}\r\n          />\r\n          <span className=\"site-logo-text-react\">React</span>\r\n        </div>\r\n        <span className=\"site-logo-text-shopping-cart\">Shopping-Cart</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ReactShoppingCartLogo;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ProductsOnPageForm extends Component {\r\n  state = {\r\n    productInputValue: 0\r\n  };\r\n  handleChange = event => {\r\n    console.log(event.target.value);\r\n    this.setState({ productInputValue: event.target.value });\r\n  };\r\n  render() {\r\n    return (\r\n      <form\r\n        className=\"products-on-page\"\r\n        // onSubmit={() => this.props.onSubmit(this.state.productInputValue)}\r\n        onSubmit={event =>\r\n          this.props.onSubmit(event, this.state.productInputValue)\r\n        }\r\n      >\r\n        <label className=\"form-label input-label\" htmlFor=\"productInput\">\r\n          Number of Products on Page\r\n        </label>\r\n        <input\r\n          type=\"number\"\r\n          className=\"form-control\"\r\n          id=\"productInput\"\r\n          onChange={this.handleChange}\r\n        />\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProductsOnPageForm;\r\n","import React, { Component } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faShoppingCart } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass ProductsInCart extends Component {\r\n  render() {\r\n    const { totalCounters } = this.props;\r\n    return (\r\n      <div className=\"ctnr-products-in-cart\">\r\n        <span className=\"products-in-cart\">Products In Cart</span>\r\n        <div className=\"ctnr-products-in-cart-qty\">\r\n          <span className=\"products-in-cart-qty badge badge-pill badge-secondary\">\r\n            {totalCounters}\r\n          </span>\r\n          <FontAwesomeIcon className=\"cart-icon\" icon={faShoppingCart} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProductsInCart;\r\n","import React, { Component } from \"react\";\r\nimport ReactShoppingCartLogo from \"./reactshoppingcartlogo\";\r\nimport ProductsOnPageForm from \"./productsonpageform\";\r\nimport ProductsInCart from \"./productsincart\";\r\nimport ResizeSensor from \"css-element-queries/src/ResizeSensor\";\r\n\r\n// Stateless Functional Component No Longer\r\n\r\nconst InvertOrderComponent = ({ condition, props }) => {\r\n  const { onSubmit, totalCounters } = props;\r\n  const firstComponent = <ProductsOnPageForm onSubmit={onSubmit} />;\r\n  const secondComponent = <ProductsInCart totalCounters={totalCounters} />;\r\n  const [first, second] = condition\r\n    ? [firstComponent, secondComponent]\r\n    : [secondComponent, firstComponent];\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {first}\r\n      {second}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nclass NavBar extends Component {\r\n  componentDidMount() {\r\n    const that = this;\r\n    const node = this._nav;\r\n    new ResizeSensor(node, function() {\r\n      const invertOrder = node.clientWidth > 576;\r\n      return that.setState({ invertOrder });\r\n    });\r\n  }\r\n  state = {\r\n    invertOrder: false\r\n  };\r\n\r\n  render() {\r\n    const { invertOrder } = this.state;\r\n    // const { onSubmit, totalCounters } = this.props;\r\n\r\n    // ref={c => (this._nav = c)} Below refers to this Nav Element created by the <Navbar /> Component\r\n    // This way we don't need to import ReactDOM in order to use ReactDOM.findDOMNode(this); yay efficiency.\r\n    return (\r\n      <nav\r\n        className=\"navbar navbar-dark bg-dark text-light\"\r\n        ref={c => (this._nav = c)}\r\n      >\r\n        <div className=\"container container-navbar-inner\">\r\n          <ReactShoppingCartLogo />\r\n          <InvertOrderComponent condition={invertOrder} props={this.props} />\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  render() {\r\n    const counter = this.props.counter;\r\n    return (\r\n      <div className=\"counter smooth-transition\">\r\n        <h4 className=\"counter-title\">Product #{counter.id}</h4>\r\n        <div className=\"counter-controls\">\r\n          <div className=\"ctnr-counter-value\">\r\n            <small className=\"quantity\">Qty.</small>\r\n            <span className={this.getBadgeClasses() + \" counter-value\"}>\r\n              {this.formatValue()}\r\n            </span>\r\n          </div>\r\n          <button\r\n            onClick={() => this.props.onIncrement(counter)}\r\n            className=\"btn btn-increment-counter btn-success btn-sm\"\r\n          >\r\n            Increment\r\n          </button>\r\n          <button\r\n            onClick={() => this.props.onDecrement(counter)}\r\n            className=\"btn btn-decrement-counter btn-secondary btn-sm\"\r\n          >\r\n            Decrement\r\n          </button>\r\n          <button\r\n            onClick={() => this.props.onDelete(counter.id)}\r\n            className=\"btn btn-delete-counter btn-danger btn-sm\"\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getBadgeClasses() {\r\n    let classes = \"badge badge-\";\r\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n\r\n  formatValue() {\r\n    const { value } = this.props.counter;\r\n    return value === 0 ? \"Zero\" : value;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n  render() {\r\n    const {\r\n      counters,\r\n      onReset,\r\n      onDelete,\r\n      onIncrement,\r\n      onDecrement\r\n    } = this.props;\r\n    return (\r\n      <div className=\"counters\">\r\n        <button onClick={onReset} className=\"btn btn-primary btn-sm m-2\">\r\n          Reset\r\n        </button>\r\n        {counters.map(counter => (\r\n          <Counter\r\n            key={counter.id}\r\n            onDelete={onDelete}\r\n            onIncrement={onIncrement}\r\n            onDecrement={onDecrement}\r\n            counter={counter}\r\n          ></Counter>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\n\nimport \"./assets/sass/App.scss\";\n\nclass App extends Component {\n  numOfProductsValue = 5;\n\n  constructCounters(num, index, value) {\n    const counters = [];\n    for (let i = 0; i < num; i++) {\n      counters.push({ id: i + 1, value: 0 });\n    }\n    // function setCountersValue(index, value) {\n    //   if (index && value) {\n    //     return (counters[index].value = value);\n    //   } else {\n    //     return (value = 0);\n    //   }\n    // }\n    // setCountersValue(index, value);\n    return counters;\n  }\n  initiateCounters(numOfCounters) {\n    numOfCounters = numOfCounters ? numOfCounters : this.numOfProductsValue;\n    const counters = this.constructCounters(numOfCounters);\n    counters.map(c => {\n      c.value = 0;\n      return c;\n    });\n    return counters;\n  }\n  state = {\n    // counters: [\n    //   { id: 1, value: 0 },\n    //   { id: 1, value: 0 },\n    //   { id: 1, value: 0 },\n    //   { id: 1, value: 0 }\n    // ]\n    numOfProductsValue: this.numOfProductsValue,\n    counters: this.initiateCounters(this.numOfProductsValue)\n    // counters: this.constructCounters(5, 2, 4)\n  };\n\n  constructor(props) {\n    super(props);\n    console.log(\"App - Constructor\", this.props);\n  }\n\n  componentDidMount() {\n    // Ajax Call\n    console.log(\"App - Mounted\");\n  }\n\n  getThisCounter(counter) {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    return { counters, index };\n  }\n\n  handleIncrement = counter => {\n    console.log(counter);\n    const { counters, index } = this.getThisCounter(counter);\n    counters[index].value++;\n    this.setState({ counters });\n  };\n\n  handleDecrement = counter => {\n    const { counters, index } = this.getThisCounter(counter);\n    let thisCounter = counters[index];\n\n    if (thisCounter.value > 0) {\n      thisCounter.value--;\n      this.setState({ counters });\n    }\n  };\n  handleSubmit = (event, productInputValue) => {\n    // console.log(\"event\", event);\n    event.preventDefault();\n\n    const numOfCounters = productInputValue;\n    // console.log(\"numOfCounters\", numOfCounters);\n\n    const counters = this.initiateCounters(numOfCounters);\n    // console.log(\"counters\", counters);\n    this.setState({ counters });\n  };\n  handleReset = () => {\n    const counters = this.initiateCounters();\n    this.setState({ counters });\n  };\n\n  handleDelete = counterId => {\n    // console.log(\"Event Handler Called\", counterId);\n    // function filterId(c) {\n    //   return c.id !== counterId;\n    // }\n    // const counters = this.state.counters.filter(filterId);\n    // this.setState({ counters: counters });\n\n    // Simplified Version of the Above Code\n    const counters = this.state.counters.filter(c => c.id !== counterId);\n    this.setState({ counters });\n  };\n\n  render() {\n    console.log(\"App - Rendered\");\n\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounters={this.state.counters.filter(c => c.value > 0).length}\n          onSubmit={this.handleSubmit}\n        />\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDecrement={this.handleDecrement}\n            onDelete={this.handleDelete}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/sass/index.scss\";\nimport \"./assets/js/accessibility\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}